# Import socket and sys library to create socket and packet, binascii and base64 for encode/ decode, array for checksum, time and random for appearances
import socket, sys, binascii, array, base64, time, random
# Import tqdm module to add nice looking loading bar during packet sending process
from tqdm import tqdm
# Import struct library for the pack() module
from struct import *

# TCP checksum creation function
def checksum(data):
        if len(data) % 2 != 0:
                data += b'\0'
        res = sum(array.array("H", data))
        red = (res >> 16) + (res & 0xffff)
        res += res >> 16
        return (~res) & 0xffff

# Main Function
def main():
	# Try/ Except for creation of RAW socket
  try:
		s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
	except socket.error as msg:
		print(msg)
		sys.exit()
    
  # Initialize packet as null to be filled later
	packet = ''
  
  # Define Source and Destination IPs
	src_ip = '10.10.0.63'
	dst_ip = '172.16.40.10'
  
	#IP header fields
	ip_ihl_ver = 69
	ip_tos = 96
	ip_tot_len = 0
	ip_id = 2020
	ip_frag_off = 0
	ip_ttl = 64
	ip_proto = 16
	ip_check = 0
	ip_saddr = socket.inet_aton ( src_ip )
	ip_daddr = socket.inet_aton ( dst_ip )
  
  # Pack IP header
	ip_header = pack('!BBHHHBBH4s4s', ip_ihl_ver, ip_tos, ip_tot_len, ip_id, ip_frag_off, ip_ttl, ip_proto, ip_check, ip_saddr, ip_daddr)
  
  # Create and encode msg string in base64
	msg = base64.b64encode(b'Bevan')
	msg = binascii.a2b_base64(msg)

	#TCP header fields
	tcp_src = 54321	# Source Port
	tcp_dst = 1234	# Destination Port
	tcp_seq = 90210
	tcp_ack_seq = 30905
	tcp_doff = 5	# 4 bit field, size of tcp header, 5 * 4 = 20 bytes

	#TCP flags
	tcp_fin = 0
	tcp_syn = 1
	tcp_rst = 0
	tcp_psh = 0
	tcp_ack = 0
	tcp_urg = 0
	tcp_window = 5620 # Maximum allowed window size
	tcp_check = 0
	tcp_urg_ptr = 0

	tcp_offset_res = (tcp_doff << 4) + 0
	tcp_flags = tcp_fin + (tcp_syn << 1) + (tcp_rst << 2) + (tcp_psh << 3) + (tcp_ack << 4) + (tcp_urg << 5)

	# The ! in the pack format string means network order
	tcp_header = pack('!HHLLBBHHH', tcp_src, tcp_dst, tcp_seq, tcp_ack_seq, tcp_offset_res, tcp_flags, tcp_window, tcp_check, tcp_urg_ptr)

	# Psuedo header fields
	src_addr = socket.inet_aton ( src_ip )
	dst_addr = socket.inet_aton ( dst_ip )
	placeholder = 0
	protocol = socket.IPPROTO_TCP
	tcp_length = len(tcp_header) + len(msg)

  # Pack the pseudo header to be used for the checksum
	psh = pack('!4s4sBBH', src_addr, dst_addr, placeholder, protocol, tcp_length);
	psh = psh + tcp_header + msg;

  # Set checksum equal to checksum generated by psuedo header
	tcp_check = checksum(psh)

	# Make the TCP header again and fill the correct checksum - remember checksum is NOT in network byte order
	tcp_header = pack('!HHLLBBH', tcp_src, tcp_dst, tcp_seq, tcp_ack_seq, tcp_offset_res, tcp_flags, tcp_window) + pack('H', tcp_check) + pack('!H', tcp_urg_ptr)

	# Final full packet - syn packets don't have any data
	packet = ip_header + tcp_header + msg

	# Ask user how many packets they woul like to send
	count = input("Enter number of packets you would like to send: ")
  
  # Set current to 1 to track how many packets have been sent
	current = 1

  # Loop through and send all packets specified by user
	for i in range(int(count)):
		print('Sending packet({}/{})...'.format(current, count))
		s.sendto(packet, (dst_ip, 0))
    # Use tqdm to create loading bars for arbitrary packet sending progress
		for i in tqdm(range(4)):
			time.sleep(0.1)
		print("Packet sent.\n")
		time.sleep(0.5)
		current = current + 1
   # Print when complete
	print('All packets sent.')

main()
